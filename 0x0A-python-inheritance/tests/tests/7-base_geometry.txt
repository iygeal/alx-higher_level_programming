# Importing the function from the module
>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

# Checking for module docstring
>>> module_docstring = __import__("7-base_geometry").__doc__
>>> len(module_docstring) > 1
True

# Checking for class docstring
>>> class_docstring = __import__("7-base_geometry").BaseGeometry.__doc__
>>> len(class_docstring) > 1
True

# Checking for method docstring
>>> area_docstring = __import__("7-base_geometry").BaseGeometry.area.__doc__
>>> len(area_docstring) > 1
True
>>> integer_validator_docstring = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
>>> len(integer_validator_docstring) > 1
True

# Checking for area failure
>>> base_geom = BaseGeometry()
>>> try:
...     base_geom.area()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented

# Checking too many arguments for area
>>> try:
...     base_geom.area(1)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: area() takes 1 positional argument but 2 were given

# Checking integer validator for passing integer
>>> base_geom.integer_validator("integer", 1)

# Checking for integer == 0
>>> try:
...     base_geom.integer_validator("integer", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
ValueError: integer must be greater than 0

# Checking for integer < 0
>>> try:
...     base_geom.integer_validator("integer", -5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
ValueError: integer must be greater than 0

# Checking for non-integer types
>>> try:
...     base_geom.integer_validator("bool", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: bool must be an integer
>>> try:
...     base_geom.integer_validator("float", 1.5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: float must be an integer
>>> try:
...     base_geom.integer_validator("complex", complex(1, 1))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: complex must be an integer
>>> try:
...     base_geom.integer_validator("string", "hello")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: string must be an integer
>>> try:
...     base_geom.integer_validator("tuple", (1, 2))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: tuple must be an integer
>>> try:
...     base_geom.integer_validator("list", [1, 2, 3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: list must be an integer
>>> try:
...     base_geom.integer_validator("dict", {"key": "value"})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: dict must be an integer
>>> try:
...     base_geom.integer_validator("set", {"hello", "world"})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: set must be an integer
>>> try:
...     base_geom.integer_validator("frozenset", frozenset(["hello", "world"]))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: frozenset must be an integer
>>> try:
...     base_geom.integer_validator("bytes", b"bytes")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: bytes must be an integer
>>> try:
...     base_geom.integer_validator("bytearrays", bytearray(b"bytes"))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: bytearrays must be an integer

# Checking for no arguments to integer_validator
>>> try:
...     base_geom.integer_validator()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Checking for only 1 argument to integer_validator
>>> try:
...     base_geom.integer_validator("integer")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: integer_validator() missing 1 required positional argument: 'value'

# Checking for too many arguments
>>> try:
...     base_geom.integer_validator("integer", 1, 2)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
TypeError: integer_validator() takes 3 positional arguments but 4 were given
